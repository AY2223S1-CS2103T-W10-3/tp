@startuml
!include style.puml


box Logic LOGIC_COLOR_T1
participant ":LogicManager" as LogicManager LOGIC_COLOR
participant ":TrackAScholarParser" as TrackAScholarParser LOGIC_COLOR
participant ":EditCommandParser" as EditCommandParser LOGIC_COLOR

participant ":EditCommand" as EditCommand LOGIC_COLOR
participant "ead:EditApplicantDescriptor" as EditApplicantDescriptor LOGIC_COLOR
participant ":CommandResult" as CommandResult LOGIC_COLOR
end box

box Model MODEL_COLOR_T1
participant ":Model" as Model MODEL_COLOR
'participant "applicant:Applicant" as Applicant MODEL_COLOR
end box

[-> LogicManager : execute(edit 1 n/Sam \n p/98886767)
activate LogicManager

LogicManager -> TrackAScholarParser : parseCommand(args)
activate TrackAScholarParser

create EditCommandParser
TrackAScholarParser -> EditCommandParser : EditCommandParser()
activate EditCommandParser

EditCommandParser --> TrackAScholarParser
deactivate EditCommandParser


TrackAScholarParser -> EditCommandParser : parse(1 n/Sam \n p/98886767)
activate EditCommandParser


EditCommandParser -> EditCommandParser : arePrefixesPresent()
activate EditCommandParser


create EditCommand
EditCommandParser -> EditCommand : EditCommand(index, EditApplicantDescriptor)
activate EditCommand

create EditApplicantDescriptor
EditCommand -> EditApplicantDescriptor : EditApplicantDescriptor()
activate EditApplicantDescriptor

EditApplicantDescriptor -> EditApplicantDescriptor : setName(args)

EditApplicantDescriptor -> EditApplicantDescriptor : setPhone(args)

EditApplicantDescriptor --> EditCommand :ead
deactivate EditApplicantDescriptor

EditCommand --> EditCommandParser
deactivate EditCommand
deactivate EditCommandParser

EditCommandParser --> TrackAScholarParser
deactivate EditCommandParser

'Hidden arrow to position the destroy marker below the end of the activation bar.
EditCommandParser -[hidden]-> TrackAScholarParser
destroy EditCommandParser

TrackAScholarParser --> LogicManager
deactivate TrackAScholarParser

LogicManager -> EditCommand : execute()
activate EditCommand

EditCommand -> Model : getFilteredApplicantList()
activate Model

Model --> EditCommand
deactivate

EditCommand --> EditCommand : createEditedApplicant(applicantToEdit, ead)

EditCommand -> Model : setApplicant(applicantToEdit, editedApplicant)
activate Model

Model --> EditCommand
deactivate

EditCommand -> Model : updateFilteredApplicantList(PREDICATE_SHOW_ALL_APPLICANTS)
activate Model

Model --> EditCommand
deactivate

create CommandResult
EditCommand -> CommandResult
activate CommandResult

CommandResult --> EditCommand
deactivate CommandResult

EditCommand --> LogicManager : result
deactivate EditCommand

[<--LogicManager
deactivate LogicManager
@enduml
